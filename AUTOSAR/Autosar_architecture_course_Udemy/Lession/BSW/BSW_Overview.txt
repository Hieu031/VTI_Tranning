The Autosar layered architecture is offering all the mechanisms needed for software and hardware independence.

It distinguishes between three main software layers, which run on a microcontroller.

The application layer, which will be called as ASW

Runtime environment or the RTE.

And the basic software, which will be called as BSW.

The main concept of the standardised ECU software architecture is the separation of hardware independent application

software and the hardware oriented basic software by means of a software abstraction layer RTE,

which is the runtime environment.

RTE forms a very clear separation here.

The upper side of the RTE is hardware independent, this abstraction layer enables the development of customer

specific and competitive software applications without the hardware dependency.

Further characteristics of the Autosar software architecture, are the scalability of ECU software for

several car lines and variants.

For example, if a vehicle manufacturer has different variant of vehicles he is flexible enough to reuse

this one developed application software across this vehicle ECU's since its hardware independent.

Meaning a customer can spend at one time development cost to develop an application like a parking assist system,

and reuse this application on different hardwares for all his car variants.

It also gives the possibility to distribute applications or the functional software modules across ECU's

.

And the ability to integrate software modules from different sources.

On the lower side of the RTE, it enables the standardisation and customer independence to the basic software

software.

The BSW developers can concentrate on the hardware specific developments and need not worry or consider

about the application software.

The basic software within the software architecture is further divided into the following layers,

the service layer,

The ECU abstraction layer and the microcontroller abstraction layer or the MCAL layer.

The separation of the application layer from the basic software is released by the RTE includes the control

of the data exchange between these layers.

The complex device driver is a specialized layer provided from Autosar in case the application

needs to access the hardware in a faster way.

It's mainly when we have time critical features where the communication passing through different

BSW layers would consume time.

It also acts as a layer to access a few standardized interfaces from the basic software.

A quick summary on the layered architecture.

The Applications Software layer is mostly hardware independent.

Communication between application softwares or the application to the basics software layer is only through RTE

RTE.

The BSW is divided into three major layers and complex drivers. The three major layers consists of services,

ECU abstraction and microcontroller abstraction layer.

Basic software is the standardized software layer, which provides services to the software components.

It does not fulfill any functional job and is situated below the runtime environment.

It contains standardized components and ECU specific components.

Components that are interfacing directly to the microcontroller are called the ECU specific components,

which is the operating system, microcontroller abstraction, layer and a complex device drivers.

The other BSW modules, like the Memory, Communications Services, etc. are called the standardized components

components.

The microcontroller abstraction layer is the lowest layer of the basic software.

It contains drivers with direct access to the microcontroller, internal peripherals and memory mapped microcontroller

external devices.

Access to the microcontroller registers is routed through the microcontroller abstraction layer based

on these driver's.

MCAL is a hardware specific layer that ensures a standard interface to the basic software.

It manages the microcontroller peripherals and provides the components of the basic software with microcontroller

independent values.

MCAL implements notification mechanisms to support the distribution of commands, responses and information

to process.

The microcontroller abstraction layer is subdivided into four parts.

IO drivers has the drivers for analog ADC, PWM, Digital IO etc.

The next is the communication drivers for easy on board, like SPI, I2C and vehicle communication

like CAN and LIN.

The next is the memory drivers for On-Chip memory devices example internal flash, internal EEPROM

and memory mapped external memory devices like External Flash.

Finally, the microcontroller drivers for Internal Peripherals example watchdog block unit and functions

with direct access to microcontroller.

Upper to the MCAL layer, next comes the ECU abstraction layer.

The easy abstraction layer provides a software interface to the electrical values of any specific ECU

in order to decouple higher level software from all underlying hardware dependencies.

They are further subdivided into IO hardware abstraction, communication abstraction, memory abstraction

and on board device abstraction.

.

IO Hardware Abstraction is a group of modules which abstracts from the location of the peripheral IO devices like

on-chip or on-board and the ECU hardware layout example, microcontroller pin connections and signal level

inversions.

The task of this group of module's is to represent IO signals as they are connected to the ECU hardware

.

Example current, voltage, frequency.

and to hide ECU hardware and Layout properties higher software layers

The communication hardware Abstraction is a group of modules which abstracts from the location of communication

controllers and the ECU hardware layout.

For all communication systems, a specific communication hardware abstraction is required.

For example for LIN, CAN, Flexray etc.

Let's consider an example where an ECU has a microcontroller with internal controls and an additional

on board ASIC with 4 CAN controllers.

The CAN IC is connected to the microcontroller via SPI.

The communication drivers are accessed via BUS specific interface, example can interfaces.

That means the access to the controller should be regardless of whether it is located inside the microcontroller

externally to it or whether it is connected via SPI.

The task of this group of module's is to provide equal mechanisms to access a BUS channel regardless

to its location, either on-chip or on-board.

Next, the memory hardware abstraction layer is a group of modules which abstracts from the location

of peripheral memory devices, either on chip or on board, and the ECU hardware layout.

Example, an on Chip EEPROM and external EEPROM devices should be accessible via an equal mechanism.

The memory drivers are accessed via memory specific interfaces called EPROM interface.

The task of this group of module's is to provide equal mechanisms to access internal on chip or external

on board memory devices.

Next, the on board device abstraction contains drivers for ECU on board devices, which cannot be seen as

sensors or actuators like system basic chip, external watchdogs, etc..

Those drivers access the ECU on both devices via the microcontroller abstraction layer.

The task of this group of module's is to abstract from ECU specific on board devices.

Upper to the abstraction layer comes the service layer that consists of three different parts.

Communication services, Memory services and systems services.

The communication services are a group of modules for vehicle network communication like CAN, LIN,

Flexray and MOST.

They are interfacing with the communication drivers via the communication hardware abstraction.

The task of this group of module's is to provide a uniform interface to the vehicle network for communication

between different applications to provide uniform services for network management,

To provide a uniform interface to the vehicle network for diagnostic communication and to hide protocol

and message properties from the application.

Next, the memory services are a group of modules responsible for the management of nonvolatile read

or write from different memory drivers.

The NVRAM manager provides a RAM mirror as a data interface to the application for fast read access.

The task of this group of module's is to provide nonvolatile data with the application in a uniform

way, to abstract memory locations and properties and to provide mechanism for nonvolatile data management,

like saving, loading, check sum protection and verification, reliable storage, etc..

Next, the system services are a group of modules and functions which can be used by modules of all layers

layers.

Examples are realtime operating system, error management and library functions like CRC, Interpolation,

etc.

Some of these services are microcontroller dependent, like the operating system.

ECU hardware are application dependent, like ECU state manager, diagnostic communication

manager.

The task of this group of module's is to provide basic services for application and basic software modules.

The next is the complex device driver, which implements complex sensor and actuator control with direct

access to the microcontroller using specific interrupts and to access complex microcontroller peripherals.

Its task is to fulfill the special functional and timing requirements for handling complex sensors and

actuators like injection control, electrical valve control, etc..

Further, the complex device drivers will be used to implement drivers for hardware, which is not supported by Autosar

.

If for example, a new communication system will be introduced in general, then no Autosar drivers will

be available.

To enable the communication via this media, the driver will be implemented inside the complex device

drivers.

In case of a communication request via that media, the communication services will call the complex

device driver instead of the communication hardware abstraction to communicate.

This is a summary of all the BMW modules that are available.