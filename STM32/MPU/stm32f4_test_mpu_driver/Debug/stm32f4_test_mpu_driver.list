
stm32f4_test_mpu_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000430  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080005c4  080005c4  000015c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005e8  080005e8  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005e8  080005e8  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005e8  080005e8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005e8  080005e8  000015e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005ec  080005ec  000015ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005f0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080005f4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080005f4  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001962  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000704  00000000  00000000  00003996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  000040a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000165  00000000  00000000  000042a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d83  00000000  00000000  00004405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029ca  00000000  00000000  00018188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e365  00000000  00000000  0001ab52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098eb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000614  00000000  00000000  00098efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00099510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005ac 	.word	0x080005ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080005ac 	.word	0x080005ac

080001d4 <MemManage_Handler>:
  *
  ******************************************************************************
  */
#include "mpu_driver.h"

void MemManage_Handler(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	uint32_t faultAddr;
	    uint8_t faultStatus;
	    MPU_GetErrorDetails(&faultAddr, &faultStatus);
 80001da:	1cfa      	adds	r2, r7, #3
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4611      	mov	r1, r2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f929 	bl	8000438 <MPU_GetErrorDetails>
	    if (faultStatus & MPU_FAULT_DACCVIOL) {
	        // Handler error Data Access Violation
	    }
	    while (1); // Debug error
 80001e6:	bf00      	nop
 80001e8:	e7fd      	b.n	80001e6 <MemManage_Handler+0x12>

080001ea <HardFault_Handler>:
}

void HardFault_Handler(void){
 80001ea:	b580      	push	{r7, lr}
 80001ec:	b082      	sub	sp, #8
 80001ee:	af00      	add	r7, sp, #0
	uint32_t faultAddr;
	    uint8_t faultStatus;
	    MPU_GetErrorDetails(&faultAddr, &faultStatus);
 80001f0:	1cfa      	adds	r2, r7, #3
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	4611      	mov	r1, r2
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f91e 	bl	8000438 <MPU_GetErrorDetails>
	    if (faultStatus & MPU_FAULT_DACCVIOL) {
	        // Handler error Data Access Violation
	    }
	    while (1); // Debug error
 80001fc:	bf00      	nop
 80001fe:	e7fd      	b.n	80001fc <HardFault_Handler+0x12>

08000200 <main>:
}


int main(void) {
 8000200:	b5b0      	push	{r4, r5, r7, lr}
 8000202:	b08e      	sub	sp, #56	@ 0x38
 8000204:	af00      	add	r7, sp, #0
    // Configure 2 regions to test
    MPU_RegionConfig_t regions[] = {
 8000206:	4b17      	ldr	r3, [pc, #92]	@ (8000264 <main+0x64>)
 8000208:	f107 041c 	add.w	r4, r7, #28
 800020c:	461d      	mov	r5, r3
 800020e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000212:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000216:	e884 0003 	stmia.w	r4, {r0, r1}
        {0, 0x00000000, 31, MPU_MEM_STRONG_ORDER, MPU_ACCESS_FULL, 1},      // Region 0: Background
        {1, 0x40000000, 9, MPU_MEM_NORMAL_NONCACHE, MPU_ACCESS_FULL, 1} // Region 1: Test
    };
    MPU_Config_t mpuConfig = {
 800021a:	2301      	movs	r3, #1
 800021c:	743b      	strb	r3, [r7, #16]
 800021e:	2301      	movs	r3, #1
 8000220:	747b      	strb	r3, [r7, #17]
 8000222:	2301      	movs	r3, #1
 8000224:	74bb      	strb	r3, [r7, #18]
 8000226:	f107 031c 	add.w	r3, r7, #28
 800022a:	617b      	str	r3, [r7, #20]
 800022c:	2302      	movs	r3, #2
 800022e:	763b      	strb	r3, [r7, #24]
        MPU_ENABLE_DEFAULT_MEM, MPU_ENABLE_IN_EXCEPTION, 1, regions, 2
    };

    // Initialize MPU
    MPU_Init(&mpuConfig);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f83b 	bl	80002b0 <MPU_Init>

    // Test error: write into Region 1 (Read Only)
    volatile uint32_t* test_addr = (uint32_t*)0x40000000;
 800023a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800023e:	637b      	str	r3, [r7, #52]	@ 0x34
    *test_addr = 0xDEADBEEF; // Get MemFault
 8000240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000242:	4a09      	ldr	r2, [pc, #36]	@ (8000268 <main+0x68>)
 8000244:	601a      	str	r2, [r3, #0]

    // Change Region 1 to Full Access after test error
    MPU_RegionConfig_t newRegion = {1, 0x40000000, 9, MPU_MEM_NORMAL_NONCACHE, MPU_ACCESS_READ_ONLY, 1};
 8000246:	4a09      	ldr	r2, [pc, #36]	@ (800026c <main+0x6c>)
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	ca07      	ldmia	r2, {r0, r1, r2}
 800024c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    MPU_SetRegionConfig(&newRegion);
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f8a2 	bl	800039c <MPU_SetRegionConfig>

    // Re-test to check and won't get fault
    *test_addr = 0x12345678;
 8000258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800025a:	4a05      	ldr	r2, [pc, #20]	@ (8000270 <main+0x70>)
 800025c:	601a      	str	r2, [r3, #0]

    while (1);
 800025e:	bf00      	nop
 8000260:	e7fd      	b.n	800025e <main+0x5e>
 8000262:	bf00      	nop
 8000264:	080005c4 	.word	0x080005c4
 8000268:	deadbeef 	.word	0xdeadbeef
 800026c:	080005dc 	.word	0x080005dc
 8000270:	12345678 	.word	0x12345678

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4907      	ldr	r1, [pc, #28]	@ (80002ac <__NVIC_EnableIRQ+0x38>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <MPU_Init>:
 *      Author: hieu.nguyentri
 */

#include "mpu_driver.h"

void MPU_Init(MPU_Config_t* config) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
    MPU->CTRL &= ~MPU_CTRL_ENABLE_Msk;
 80002b8:	4b37      	ldr	r3, [pc, #220]	@ (8000398 <MPU_Init+0xe8>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a36      	ldr	r2, [pc, #216]	@ (8000398 <MPU_Init+0xe8>)
 80002be:	f023 0301 	bic.w	r3, r3, #1
 80002c2:	6053      	str	r3, [r2, #4]
    for (uint8_t i = 0; i < config->RegionCount; i++) {
 80002c4:	2300      	movs	r3, #0
 80002c6:	75fb      	strb	r3, [r7, #23]
 80002c8:	e036      	b.n	8000338 <MPU_Init+0x88>
        MPU_RegionConfig_t* region = &config->Regions[i];
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	6859      	ldr	r1, [r3, #4]
 80002ce:	7dfa      	ldrb	r2, [r7, #23]
 80002d0:	4613      	mov	r3, r2
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	4413      	add	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	440b      	add	r3, r1
 80002da:	60fb      	str	r3, [r7, #12]
        MPU->RNR  = region->RegionNumber;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	781a      	ldrb	r2, [r3, #0]
 80002e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000398 <MPU_Init+0xe8>)
 80002e2:	609a      	str	r2, [r3, #8]
        MPU->RBAR = region->StartAddress;
 80002e4:	4a2c      	ldr	r2, [pc, #176]	@ (8000398 <MPU_Init+0xe8>)
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	60d3      	str	r3, [r2, #12]
        MPU->RASR = (region->Size << MPU_RASR_SIZE_Pos) |
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	7a1b      	ldrb	r3, [r3, #8]
 80002f0:	005a      	lsls	r2, r3, #1
                    (region->AccessRight << MPU_RASR_AP_Pos) |
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	7a9b      	ldrb	r3, [r3, #10]
 80002f6:	061b      	lsls	r3, r3, #24
        MPU->RASR = (region->Size << MPU_RASR_SIZE_Pos) |
 80002f8:	4313      	orrs	r3, r2
 80002fa:	461a      	mov	r2, r3
                    (region->MemoryType == MPU_MEM_STRONG_ORDER ? (0x2 << MPU_RASR_TEX_Pos) :
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	7a5b      	ldrb	r3, [r3, #9]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d009      	beq.n	8000318 <MPU_Init+0x68>
                     region->MemoryType == MPU_MEM_NORMAL_CACHEABLE ? (0x1 << MPU_RASR_TEX_Pos) | MPU_RASR_C_Msk :
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	7a5b      	ldrb	r3, [r3, #9]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d102      	bne.n	8000312 <MPU_Init+0x62>
 800030c:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 8000310:	e004      	b.n	800031c <MPU_Init+0x6c>
 8000312:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000316:	e001      	b.n	800031c <MPU_Init+0x6c>
                    (region->MemoryType == MPU_MEM_STRONG_ORDER ? (0x2 << MPU_RASR_TEX_Pos) :
 8000318:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
                    (region->AccessRight << MPU_RASR_AP_Pos) |
 800031c:	4313      	orrs	r3, r2
                     (0x1 << MPU_RASR_TEX_Pos)) |
                    (region->Enable ? MPU_RASR_ENABLE_Msk : 0);
 800031e:	68fa      	ldr	r2, [r7, #12]
 8000320:	7ad2      	ldrb	r2, [r2, #11]
 8000322:	2a00      	cmp	r2, #0
 8000324:	d001      	beq.n	800032a <MPU_Init+0x7a>
 8000326:	2201      	movs	r2, #1
 8000328:	e000      	b.n	800032c <MPU_Init+0x7c>
 800032a:	2200      	movs	r2, #0
        MPU->RASR = (region->Size << MPU_RASR_SIZE_Pos) |
 800032c:	491a      	ldr	r1, [pc, #104]	@ (8000398 <MPU_Init+0xe8>)
                     (0x1 << MPU_RASR_TEX_Pos)) |
 800032e:	4313      	orrs	r3, r2
        MPU->RASR = (region->Size << MPU_RASR_SIZE_Pos) |
 8000330:	610b      	str	r3, [r1, #16]
    for (uint8_t i = 0; i < config->RegionCount; i++) {
 8000332:	7dfb      	ldrb	r3, [r7, #23]
 8000334:	3301      	adds	r3, #1
 8000336:	75fb      	strb	r3, [r7, #23]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	7a1b      	ldrb	r3, [r3, #8]
 800033c:	7dfa      	ldrb	r2, [r7, #23]
 800033e:	429a      	cmp	r2, r3
 8000340:	d3c3      	bcc.n	80002ca <MPU_Init+0x1a>
    }
    uint32_t ctrl = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	613b      	str	r3, [r7, #16]
    if (config->EnableDefaultMem) ctrl |= MPU_CTRL_PRIVDEFENA_Msk;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d003      	beq.n	8000356 <MPU_Init+0xa6>
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	613b      	str	r3, [r7, #16]
    if (config->EnableInException) ctrl |= MPU_CTRL_HFNMIENA_Msk;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	785b      	ldrb	r3, [r3, #1]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d003      	beq.n	8000366 <MPU_Init+0xb6>
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	f043 0302 	orr.w	r3, r3, #2
 8000364:	613b      	str	r3, [r7, #16]
    ctrl |= MPU_CTRL_ENABLE_Msk;
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	613b      	str	r3, [r7, #16]
    MPU->CTRL = ctrl;
 800036e:	4a0a      	ldr	r2, [pc, #40]	@ (8000398 <MPU_Init+0xe8>)
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	6053      	str	r3, [r2, #4]
    if (config->EnableMemManage) NVIC_EnableIRQ(MemoryManagement_IRQn);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	789b      	ldrb	r3, [r3, #2]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d003      	beq.n	8000384 <MPU_Init+0xd4>
 800037c:	f06f 000b 	mvn.w	r0, #11
 8000380:	f7ff ff78 	bl	8000274 <__NVIC_EnableIRQ>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000384:	f3bf 8f4f 	dsb	sy
}
 8000388:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800038a:	f3bf 8f6f 	isb	sy
}
 800038e:	bf00      	nop
    __DSB();
    __ISB();
}
 8000390:	bf00      	nop
 8000392:	3718      	adds	r7, #24
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	e000ed90 	.word	0xe000ed90

0800039c <MPU_SetRegionConfig>:
    }
    __DSB();
    __ISB();
}

void MPU_SetRegionConfig(MPU_RegionConfig_t* region) {
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
    // CHeck valid regions numbers (0-7)
    if (region->RegionNumber > 7) return;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b07      	cmp	r3, #7
 80003aa:	d83c      	bhi.n	8000426 <MPU_SetRegionConfig+0x8a>

    // Disable MPU before initialize to avoid conflict
    uint32_t ctrl = MPU->CTRL;
 80003ac:	4b21      	ldr	r3, [pc, #132]	@ (8000434 <MPU_SetRegionConfig+0x98>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	60fb      	str	r3, [r7, #12]
    MPU->CTRL &= ~MPU_CTRL_ENABLE_Msk;
 80003b2:	4b20      	ldr	r3, [pc, #128]	@ (8000434 <MPU_SetRegionConfig+0x98>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000434 <MPU_SetRegionConfig+0x98>)
 80003b8:	f023 0301 	bic.w	r3, r3, #1
 80003bc:	6053      	str	r3, [r2, #4]

    // Configure Region
    MPU->RNR  = region->RegionNumber;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	781a      	ldrb	r2, [r3, #0]
 80003c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000434 <MPU_SetRegionConfig+0x98>)
 80003c4:	609a      	str	r2, [r3, #8]
    MPU->RBAR = region->StartAddress;
 80003c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000434 <MPU_SetRegionConfig+0x98>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	60d3      	str	r3, [r2, #12]
    MPU->RASR = (region->Size << MPU_RASR_SIZE_Pos) |
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	7a1b      	ldrb	r3, [r3, #8]
 80003d2:	005a      	lsls	r2, r3, #1
                (region->AccessRight << MPU_RASR_AP_Pos) |
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	7a9b      	ldrb	r3, [r3, #10]
 80003d8:	061b      	lsls	r3, r3, #24
    MPU->RASR = (region->Size << MPU_RASR_SIZE_Pos) |
 80003da:	4313      	orrs	r3, r2
 80003dc:	461a      	mov	r2, r3
                (region->MemoryType == MPU_MEM_STRONG_ORDER ? (0x2 << MPU_RASR_TEX_Pos) :
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	7a5b      	ldrb	r3, [r3, #9]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d009      	beq.n	80003fa <MPU_SetRegionConfig+0x5e>
                 region->MemoryType == MPU_MEM_NORMAL_CACHEABLE ? (0x1 << MPU_RASR_TEX_Pos) | MPU_RASR_C_Msk :
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	7a5b      	ldrb	r3, [r3, #9]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d102      	bne.n	80003f4 <MPU_SetRegionConfig+0x58>
 80003ee:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 80003f2:	e004      	b.n	80003fe <MPU_SetRegionConfig+0x62>
 80003f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80003f8:	e001      	b.n	80003fe <MPU_SetRegionConfig+0x62>
                (region->MemoryType == MPU_MEM_STRONG_ORDER ? (0x2 << MPU_RASR_TEX_Pos) :
 80003fa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
                (region->AccessRight << MPU_RASR_AP_Pos) |
 80003fe:	4313      	orrs	r3, r2
                 (0x1 << MPU_RASR_TEX_Pos)) |
                (region->Enable ? MPU_RASR_ENABLE_Msk : 0);
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	7ad2      	ldrb	r2, [r2, #11]
 8000404:	2a00      	cmp	r2, #0
 8000406:	d001      	beq.n	800040c <MPU_SetRegionConfig+0x70>
 8000408:	2201      	movs	r2, #1
 800040a:	e000      	b.n	800040e <MPU_SetRegionConfig+0x72>
 800040c:	2200      	movs	r2, #0
    MPU->RASR = (region->Size << MPU_RASR_SIZE_Pos) |
 800040e:	4909      	ldr	r1, [pc, #36]	@ (8000434 <MPU_SetRegionConfig+0x98>)
                 (0x1 << MPU_RASR_TEX_Pos)) |
 8000410:	4313      	orrs	r3, r2
    MPU->RASR = (region->Size << MPU_RASR_SIZE_Pos) |
 8000412:	610b      	str	r3, [r1, #16]

    // Restore status MPU
    MPU->CTRL = ctrl;
 8000414:	4a07      	ldr	r2, [pc, #28]	@ (8000434 <MPU_SetRegionConfig+0x98>)
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800041a:	f3bf 8f4f 	dsb	sy
}
 800041e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000420:	f3bf 8f6f 	isb	sy
}
 8000424:	e000      	b.n	8000428 <MPU_SetRegionConfig+0x8c>
    if (region->RegionNumber > 7) return;
 8000426:	bf00      	nop
    __DSB();
    __ISB();
}
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	e000ed90 	.word	0xe000ed90

08000438 <MPU_GetErrorDetails>:

void MPU_GetErrorDetails(uint32_t* faultAddr, uint8_t* faultStatus) {
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
    *faultAddr = SCB->MMFAR;   // Address get fault
 8000442:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <MPU_GetErrorDetails+0x38>)
 8000444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	601a      	str	r2, [r3, #0]
    *faultStatus = SCB->CFSR & 0xFF; // Error status (MMFSR)
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MPU_GetErrorDetails+0x38>)
 800044c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800044e:	b2da      	uxtb	r2, r3
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	701a      	strb	r2, [r3, #0]

    // Delete error flag after read data
    SCB->CFSR |= SCB->CFSR & 0xFF;
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MPU_GetErrorDetails+0x38>)
 8000456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000458:	b2da      	uxtb	r2, r3
 800045a:	4b05      	ldr	r3, [pc, #20]	@ (8000470 <MPU_GetErrorDetails+0x38>)
 800045c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800045e:	4904      	ldr	r1, [pc, #16]	@ (8000470 <MPU_GetErrorDetails+0x38>)
 8000460:	4313      	orrs	r3, r2
 8000462:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	e000ed00 	.word	0xe000ed00

08000474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <NMI_Handler+0x4>

0800047c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <BusFault_Handler+0x4>

08000484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <UsageFault_Handler+0x4>

0800048c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ba:	f000 f83f 	bl	800053c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <SystemInit+0x20>)
 80004ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004ce:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <SystemInit+0x20>)
 80004d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80004ec:	f7ff ffea 	bl	80004c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004f0:	480c      	ldr	r0, [pc, #48]	@ (8000524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004f2:	490d      	ldr	r1, [pc, #52]	@ (8000528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000508:	4c0a      	ldr	r4, [pc, #40]	@ (8000534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000516:	f000 f825 	bl	8000564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800051a:	f7ff fe71 	bl	8000200 <main>
  bx  lr    
 800051e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000520:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800052c:	080005f0 	.word	0x080005f0
  ldr r2, =_sbss
 8000530:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000534:	20000024 	.word	0x20000024

08000538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC_IRQHandler>
	...

0800053c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <HAL_IncTick+0x20>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <HAL_IncTick+0x24>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4413      	add	r3, r2
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <HAL_IncTick+0x24>)
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000000 	.word	0x20000000
 8000560:	20000020 	.word	0x20000020

08000564 <__libc_init_array>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	4d0d      	ldr	r5, [pc, #52]	@ (800059c <__libc_init_array+0x38>)
 8000568:	4c0d      	ldr	r4, [pc, #52]	@ (80005a0 <__libc_init_array+0x3c>)
 800056a:	1b64      	subs	r4, r4, r5
 800056c:	10a4      	asrs	r4, r4, #2
 800056e:	2600      	movs	r6, #0
 8000570:	42a6      	cmp	r6, r4
 8000572:	d109      	bne.n	8000588 <__libc_init_array+0x24>
 8000574:	4d0b      	ldr	r5, [pc, #44]	@ (80005a4 <__libc_init_array+0x40>)
 8000576:	4c0c      	ldr	r4, [pc, #48]	@ (80005a8 <__libc_init_array+0x44>)
 8000578:	f000 f818 	bl	80005ac <_init>
 800057c:	1b64      	subs	r4, r4, r5
 800057e:	10a4      	asrs	r4, r4, #2
 8000580:	2600      	movs	r6, #0
 8000582:	42a6      	cmp	r6, r4
 8000584:	d105      	bne.n	8000592 <__libc_init_array+0x2e>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f855 3b04 	ldr.w	r3, [r5], #4
 800058c:	4798      	blx	r3
 800058e:	3601      	adds	r6, #1
 8000590:	e7ee      	b.n	8000570 <__libc_init_array+0xc>
 8000592:	f855 3b04 	ldr.w	r3, [r5], #4
 8000596:	4798      	blx	r3
 8000598:	3601      	adds	r6, #1
 800059a:	e7f2      	b.n	8000582 <__libc_init_array+0x1e>
 800059c:	080005e8 	.word	0x080005e8
 80005a0:	080005e8 	.word	0x080005e8
 80005a4:	080005e8 	.word	0x080005e8
 80005a8:	080005ec 	.word	0x080005ec

080005ac <_init>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr

080005b8 <_fini>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr
