/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
#include "stdint.h"
#include "MPU.h"
#include "MPU_Config.h"
#include "MPU_Base.h"
#include "SCB_Base.h"
#include "Std_Type.h"
#include "MPU_Type.h"

#define T_REGION				(1)
#define T_ADDRESS 				(0x40000000UL)

//boolean t_bMpu_ErrorDetected = FALSE;
//MPU_ErrorDetailsType *t_Mpu_FaultDetails;

int a = 1;

void MemManage_Handler(void);
void HardFault_Handler(void);


int main(void) {
	// Configure 2 regions to test
	    MPU_RegionConfig_t regions[] = {
	        {0, 0x00000000, 31, MPU_MEM_STRONG_ORDER, MPU_ACCESS_FULL, 1},      // Region 0: Background
	        {1, 0x40000000, 9, MPU_MEM_NORMAL_NONCACHE, MPU_ACCESS_FULL, 1} // Region 1: Test
	    };
	    MPU_Config_t mpuConfig = {
	        MPU_ENABLE_DEFAULT_MEM, MPU_ENABLE_IN_EXCEPTION, 1, regions, 2
	    };

	    // Initialize MPU
	    MPU_Init(&mpuConfig);

	    // Test error: write into Region 1 (Read Only)
	    volatile uint32_t* test_addr = (uint32_t*)0x40000000;
	    *test_addr = 0xDEADBEEF; // Get MemFault
//	/* initialize MPU 0 and 1 */
//	MPU_Init(&MPU_Config_0);
//
//	/* perform write data (un-success) */
//	*(uint32_t *) T_ADDRESS = 0x12345678;
//
////	/* MPU set region with different attribute */
////	MPU_SetAccessRight(1, MPU_PRIV_RX_UNPRIV_RX);
////
////	/* perform write data to get fault */
////	*(uint32_t *) T_ADDRESS = 0x34569872;

}

void MemManage_Handler(void){
	a = 2;
	while (1); // Debug error
//	t_bMpu_ErrorDetected = MPU_GetErrorDetails(&t_Mpu_FaultDetails);
}

void HardFault_Handler(void){
	a = 3;
	while (1); // Debug error
}

